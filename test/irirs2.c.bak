#include <stdio.h>
#include "nnet.h"

void irisout(double *out, int N, double *clamp) {
	int i;
	double temp;

	temp = out[0];
	clamp[0] = 1.0;

	for (i = 1; i < N; ++i) {
		if (out[i] > temp) {
			clamp[i] = 1.0;
			clamp[i - 1] = 0.0;
		}
		else {
			clamp[i] = 0.0;
		}
	}
}

int main() {
	int N, i, lendata, lentarget;
	int tsize, leninp, lenoup;
	double *data, *target, *output,*out;
	int iter;
	double accr;
	nnet_object obj;

	FILE *fp;

	N = 3;

	tsize = 150;
	leninp = 4;
	lenoup = 3;
	lendata = tsize * leninp;
	lentarget = tsize * lenoup;

	data = (double*)malloc(sizeof(double)* lendata);
	target = (double*)malloc(sizeof(double)* lentarget);
	output = (double*)malloc(sizeof(double)* lenoup);
	out = (double*)malloc(sizeof(double)* lenoup * tsize);

	fp = fopen("iris.data.txt", "r");

	for (i = 0; i < tsize; ++i) {
		fscanf(fp, "%lf %lf %lf %lf %lf %lf %lf", &(data[leninp * i]), &(data[leninp * i + 1]), &(data[leninp * i + 2]), &(data[leninp * i + 3]),
			&(target[i*lenoup]), &(target[i*lenoup + 1]), &(target[i*lenoup + 2]));
	}

	fclose(fp);
	/*
	for (i = 0; i < tsize; ++i) {
	//target[i] = 0.5 * (target[i] + 1.0);
	printf("%g %g %g %g %g %g %g \n", data[leninp * i], data[leninp * i + 1], data[leninp * i + 2], data[leninp * i + 3], target[i*lenoup], target[i*lenoup+1], target[i*lenoup+2]);
	}
	*/


	int arch[3] = { 4, 7, 3 };
	int actfcn[3] = { 0, 3, 2 };

	obj = nnet_init(N, arch, actfcn);

	set_trainfcn(obj, "traingd");
	//set_training_ratios(obj, 1.0, 0.0, 0.0);
	//obj->eta = 0.05;
	//obj->alpha = 0.01;
	set_learning_rate(obj, 0.1);// learning rate
	set_momentum(obj, 0.9);// No momentum term
	set_max_epoch(obj, 1000);
	set_norm_method(obj,1);
	set_mnmx(obj, 0, 1, 0, 1);

	train(obj, tsize, data, target);
	double clamp[3] = { 0, 0, 0 };
	accr = 0;

	sim(obj, tsize,data, out);

	for (i = 0; i < tsize; ++i) {
		//feedforward(obj, data + i*leninp, leninp, lenoup, output);
		irisout(out+i*lenoup, lenoup, clamp);
		//printf("%g %g %g %g %g %g \n", target[i*lenoup], target[i*lenoup + 1], target[i*lenoup + 2], clamp[0], clamp[1], clamp[2]);
		if (target[i*lenoup] == clamp[0] && target[i*lenoup + 1] == clamp[1] && target[i*lenoup + 2] == clamp[2]) {
			accr++;
		}
	}
	printf("Accuracy %g \n", (double)accr / tsize);

	for (i = 0; i < obj->lw; ++i) {
		printf("%g ", obj->weight[i]);
	}

	//func_lm(data, 4, 4, obj);

	nnet_free(obj);
	free(data);
	free(target);
	free(output);
	free(out);
	return 0;
}