#include <stdio.h>
#include "nnet.h"

void createsine(double *x,int N,double *fx) {
	int i;
	for (i = 0; i < N; ++i) {
		fx[i] = sin(x[i]);
		printf("X %g f(X) %g \n", x[i], fx[i]);
	}
}

int main() {
	int N,i,lendata,lentarget;
	int tsize;
	double *gp,*p,*data, *target;
	double pi,t;
	nnet_object obj;
	/*
	double pi;

	data = (double*)malloc(sizeof(double)* 1000);
	target = (double*)malloc(sizeof(double)* 1000);
	pi = 3.14159265359;
	FILE *fp;

	fp = fopen("sine.txt", "w");

	for (i = 0; i < 1000; ++i) {
		data[i] = ((double)(rand() % 100) + 1) * 2 * pi / 100 - pi;
		target[i] = sin(data[i]);
		fprintf(fp, "%g %g \n", data[i], target[i]);
	}

	fclose(fp);
	*/


	/*
	FILE *fp;

	fp = fopen("sine.txt", "r");

	for (i = 0; i < 1000; ++i) {
		fscanf(fp, "%lf %lf", &(data[i]), &(target[i]));
	}

	fclose(fp);

	for (i = 0; i < 1000; ++i) {
		//target[i] = 0.5 * (target[i] + 1.0);
		printf("%g %g \n", data[i], target[i]);
	}
	*/
	pi = 3.14159265359;
	N = 3;
	lendata = 21;
	lentarget = 21;
	tsize = 21;
	data = (double*)malloc(sizeof(double)* 1);
	target = (double*)malloc(sizeof(double)* 1);
	p = (double*)malloc(sizeof(double)* 21);
	gp = (double*)malloc(sizeof(double)* 21);
	t = -2.0;
	
	for (i = 0; i < 21; ++i) {
		p[i] = t + 0.2 * i;
		gp[i] = 1.0 + sin(pi * p[i]/ 4.0);
	}

	for (i = 0; i < tsize; ++i) {
		printf("%g %g \n", p[i], gp[i]);
	}

	int arch[3] = { 1,2,1};
	double output[1] = { 0.0 };
	int actfcn[3] = { 0, 2, 1 };

	obj = nnet_init(N, arch, actfcn);
	/*
	setfunction(obj, "logsig");
	obj->weight[0] = -0.48;//bias
	obj->weight[1] = -0.27;
	obj->weight[2] = -0.13;//bias
	obj->weight[3] = -0.41;
	obj->weight[4] =  0.48;//bias
	obj->weight[5] =  0.09;
	obj->weight[6] = -0.17;
	data[0] = p[15];
	target[0] = gp[15];
	feedforward(obj, data, 1, 1, output);
	backpropagate(obj, output, target, 1);
	printf("%g %g %d \n", *data, *output,obj->lw);
	
	for (i = 0; i < obj->lw; ++i) {
		printf("W %g \n", obj->weight[i]);
	}
	*/
	//obj->alpha = 0.9;
	//obj->eta = 0.01;
	obj->emax = 300;
	train(obj, tsize, p, gp);

	for (i = 0; i < tsize; ++i) {
		feedforward(obj, p + i, 1, 1, output);
		printf("%g %g \n", gp[i],output[0]);
	}
	
	nnet_free(obj);
	free(data);
	free(target);
	return 0;
}